
public class DoublLinkedList {

	private Node first;
	private Node last;
	private int count = 0;

	public Object getFirt() {
		return this.first;
	}

	public Object getLast() {
		return this.last;
	}

	// count the length of the list
	public int size() {
		return count;
	}

	public void addFirst(Student newNode) {
		if (this.count == 0) {
			this.first = this.last = new Node(newNode);
			first.setNext(first);
			first.setPrivious(first);
		} else {
			Node newnd = new Node(newNode);
			newnd.setNext(this.first);
			first.setPrivious(newnd);
			newnd.setPrivious(last);
			last.setNext(newnd);
			first = first.getPrivious();
		}
		count++;
	}

	// in this method we need to add need at last double linked list
	public void addLast(Student newNode) {
		if (count == 0) {
			this.first = this.last = new Node(newNode);
		} else {
			Node newnd = new Node(newNode);
			newnd.setPrivious(last);
			newnd.setNext(first);
			last.setNext(newnd);
			first.setPrivious(newnd);
			newnd.setNext(first);
			last = last.getNext();
		}
		count++;
	}

	// in this method we need to add node in double linked list
	public void add(Student newNode, int index) {
		Node curent;
		if (index >= count) {
			addLast(newNode);
		} else if (index <= 0) {
			addFirst(newNode);
		} else {
			curent = this.first;
			for (int i = 0; i < index - 2; i++) {
				curent = curent.getNext();

			}
			Node newNd = new Node(newNode);
			newNd.setNext(curent.getNext());
			newNd.setPrivious(curent);
			curent.getNext().setPrivious(newNd);
			curent.setNext(newNd);

			count++;
		}

	}

	// get the student by name
	public Student get(String name) {
		if (count == 0) {
			return null;
		}
		Node current = first;
		for (int i = 0; i < count; i++) {
			if (!current.getElement().getName().equals(name)) {
				current = current.getNext();
			} else {
				break;
			}
		}
		return current.getElement();
	}

	// in this method to return object of student by index
	public Student get(int index) {
		if (count == 0) {
			return null;
		}
		if (index <= 0 || index > count) {
			return null;
		} else {
			if (index == 1) {
				return first.getElement();
			} else {
				Node current = this.first;
				for (int i = 0; i < index - 1; i++) {
					current = current.getNext();
				}
				return current.getElement();
			}
		}
	}

	// in this method we need to remove first node in double linked list
	public boolean removeFirst() {

		if (count == 0) {
			return false;
		} else if (count == 1) {
			this.first = this.last = null;

		} else {
			Node temp = this.first;
			this.last.setNext(this.first.getNext());
			this.first.getNext().setPrivious(last);
			first = first.getNext();
			temp.setNext(null);
			temp.setPrivious(null);
			temp = null;
			// this.first = this.first.getNext();

		}
		count--;
		return true;
	}

	// in this method we need to remove last node in double linked list

	public boolean removeLast() {
		Node temp = this.first;
		if (this.count == 0) {
			return false;
		} else {
			for (int i = 0; i < count; i++) {
				temp = temp.getNext();
			}

			temp.setNext(this.first);
			this.first.setPrivious(temp);
			temp = this.last;
			this.last.setNext(null);

		}
		count--;
		return true;
	}

	// in this method we need to remove last node in double linked list
	public boolean removeAt(int index) {

		Node temp = this.first;
		Node prev = null;

		if (index == 0) {
			return removeFirst();
		} else if (index == count) {
			return removeLast();

		} else if (index > count) {
			return false;
		} else if (index < 0) {
			return false;
		} else {
			for (int i = 0; i < index; i++) {
				temp = temp.getNext();
				prev = temp;
			}

			temp.setPrivious(prev.getPrivious());
			prev.getPrivious().setNext(prev.getNext());
			prev.setPrivious(null);
			prev.setNext(null);
			count--;
			return true;
		}
	}

	public boolean removeObj(Student element) {
		Node current = null, previous = null;
		if (count == 0) {
			return false;
		}
		if (count == 1 && element.equals(getFirt())) {
			removeFirst();
		}
		if (element.equals(getFirt())) {
			removeFirst();
		} else {
			current = first;
			for (int i = 0; i < count; i++) {
				previous = current;
				current = current.getNext();
				if (current.getElement().equals(element)) {
					System.out.println("this is deleted : ----> " + current.getElement());
					previous.setNext(current.getNext());
					current.getNext().setPrivious(previous);
					current.setNext(null);
					current.setPrivious(null);
					current = null;
					count--;
					return true;

				}
			}

		}
		return true;
	}

	public void printList() {
		Node temp = this.first;
		if (count == 0) {
			return;
		}
		for (int i = 0; i < count; i++) {
			System.out.println(temp.toString());
			temp = temp.getNext();
		}
	}

}
